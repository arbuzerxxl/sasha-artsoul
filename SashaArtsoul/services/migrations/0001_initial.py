# Generated by Django 4.1.2 on 2022-10-10 12:08

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import services.models
import services.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(help_text='Введите имя', max_length=40, verbose_name='Имя')),
                ('second_name', models.CharField(help_text='Введите фамилию', max_length=40, verbose_name='Фамилия')),
                ('age', models.PositiveSmallIntegerField(blank=True, help_text='Введите возраст', null=True, verbose_name='Возраст')),
                ('phone_number', models.CharField(help_text='Введите номер телефона', max_length=18, verbose_name='Номер телефона')),
                ('date_of_birth', models.DateField(blank=True, help_text='Введите дату рождения', null=True, verbose_name='Дата рождения')),
                ('date_of_first_visit', models.DateField(blank=True, help_text='Введите дату первого визита', null=True, verbose_name='Дата первого визита')),
                ('client_type', models.CharField(choices=[('Постоянный клиент', 'Постоянный клиент'), ('Обычный клиент', 'Обычный клиент'), ('Первый визит', 'Первый визит')], help_text='Введите тип клиента', max_length=20, verbose_name='Тип клиента')),
            ],
        ),
        migrations.CreateModel(
            name='Discount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('Первый визит', 'Первый визит'), ('Шестой визит', 'Шестой визит'), ('Сарафан', 'Сарафан')], help_text='Выберите тип скидки', max_length=15, unique=True, verbose_name='Тип скидки')),
                ('value', models.FloatField(editable=False, verbose_name='Значение скидки')),
            ],
        ),
        migrations.CreateModel(
            name='Master',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(help_text='Введите имя', max_length=40, verbose_name='Имя')),
                ('second_name', models.CharField(help_text='Введите фамилию', max_length=40, verbose_name='Фамилия')),
                ('age', models.PositiveSmallIntegerField(blank=True, help_text='Введите возраст', null=True, verbose_name='Возраст')),
                ('phone_number', models.CharField(help_text='Введите номер телефона', max_length=17, verbose_name='Номер телефона')),
                ('date_of_birth', models.DateField(blank=True, help_text='Введите дату рождения', null=True, verbose_name='Дата рождения')),
                ('qualification', models.CharField(blank=True, choices=[('Топ-мастер', 'Топ-мастер'), ('Обычный мастер', 'Обычный мастер'), ('Ученик', 'Ученик')], help_text='Выберите квалификалицию', max_length=15, null=True, verbose_name='Квалификация мастера')),
            ],
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('Маникюр', 'Маникюр'), ('Маникюр с покрытием', 'Маникюр с покрытием'), ('Коррекция', 'Коррекция'), ('Наращивание', 'Наращивание'), ('Френч', 'Френч'), ('Педикюр', 'Педикюр'), ('Педикюр с покрытием (стопа)', 'Педикюр с покрытием (стопа)'), ('Педикюр с покрытием (пальчики)', 'Педикюр с покрытием (пальчики)')], help_text='Выберите услугу', max_length=30, unique=True, verbose_name='Услуга')),
                ('value', models.IntegerField(editable=False, verbose_name='Стоимость услуги')),
            ],
        ),
        migrations.CreateModel(
            name='Visit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('visit_date', models.DateTimeField(help_text='Укажите дату и время записи', verbose_name='Дата и время записи')),
                ('status', models.CharField(choices=[('Предварительная запись', 'Предварительная запись'), ('Успешная запись', 'Успешная запись'), ('Отмененная запись', 'Отмененная запись')], help_text='Выберите статус записи', max_length=30, verbose_name='Статус записи')),
                ('service_price', models.PositiveSmallIntegerField(editable=False, verbose_name='Стоимость услуги')),
                ('total', models.FloatField(editable=False, verbose_name='Вывод по чеку')),
                ('tax', models.FloatField(editable=False, null=True, verbose_name='Налог')),
                ('review', models.CharField(blank=True, help_text='Напишите ваш отзыв', max_length=250, null=True, verbose_name='Отзыв')),
                ('rating', models.PositiveSmallIntegerField(blank=True, choices=[(5, 'Великолепно'), (4, 'Хорошо'), (3, 'Обычно'), (2, 'Плохо'), (1, 'Ужасно')], help_text='Здесь Вы можете указать вашу оценку', null=True, unique=True, verbose_name='Ваша оценка')),
                ('client', models.ForeignKey(help_text='Укажите клиента', on_delete=django.db.models.deletion.CASCADE, to='services.client', verbose_name='Клиент')),
                ('discount', models.ForeignKey(help_text='Выберите тип скидки', on_delete=django.db.models.deletion.CASCADE, to='services.discount', verbose_name='Тип скидки')),
                ('master', models.ForeignKey(help_text='Укажите мастера', on_delete=django.db.models.deletion.CASCADE, to='services.master', verbose_name='Мастер')),
                ('service', models.ForeignKey(help_text='Выберите тип услуги', on_delete=django.db.models.deletion.CASCADE, to='services.service', verbose_name='Тип услуги')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('phone_number', models.CharField(error_messages={'unique': 'Пользователь с таким номером телефона уже существует.'}, help_text="Обязательно. Максимально допустимое кол-во символов - 18. Цифры и символы '()', '+' и '_'.", max_length=150, unique=True, validators=[services.validators.PhoneNumberValidator()], verbose_name='Номер телефона')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
                'swappable': 'AUTH_USER_MODEL',
            },
            managers=[
                ('objects', services.models.UserManager()),
            ],
        ),
        migrations.AddConstraint(
            model_name='visit',
            constraint=models.UniqueConstraint(fields=('visit_date', 'status'), name='unique_status'),
        ),
        migrations.AddConstraint(
            model_name='visit',
            constraint=models.UniqueConstraint(fields=('visit_date', 'client'), name='unique_client'),
        ),
        migrations.AddConstraint(
            model_name='visit',
            constraint=models.UniqueConstraint(fields=('visit_date', 'master'), name='unique_master'),
        ),
    ]
